
<h1><%= @user.email %></h1>
<%#= Payment.register_customer("test") %>
<%#= ENV['STRIPE_PUBLISHABLE_KEY'] %>

<form action="/charge" method="post" id="payment-form">
  <div class="form-row">
    <label for="card-element">
      クレジット・デビットカード番号
    </label>
    <div id="card-element">
      <!-- Stripe Element がここに入ります。 -->
    </div>

    <!-- Element のエラーを入れます。 -->
    <div id="card-errors" role="alert"></div>
  </div>

  <button>お支払い</button>
</form>




<script>
var stripe = Stripe(ENV['STRIPE_PUBLISHABLE_KEY']);
var elements = stripe.elements();
// Element作成時に options から スタイルを調整できます.
var style = {
  base: {
    // ここでStyleの調整をします。
    fontSize: '16px',
    color: "#32325d",
  }
};

// card Element のインスタンスを作成
var card = elements.create('card', {style: style});

// マウント
card.mount('#card-element');

card.addEventListener('change', function(event) {
  var displayError = document.getElementById('card-errors');
  if (event.error) {
    displayError.textContent = event.error.message;
  } else {
    displayError.textContent = '';
  }
});

var form = document.getElementById('payment-form');
form.addEventListener('submit', function(event) {
  event.preventDefault();

  stripe.createToken(card).then(function(result) {
    if (result.error) {
      // エラー表示.
      var errorElement = document.getElementById('card-errors');
      errorElement.textContent = result.error.message;
    } else {
      // トークンをサーバに送信
      stripeTokenHandler(result.token);
    }
  });
});

function stripeTokenHandler(token) {
  // tokenをフォームへ包含し送信
  var form = document.getElementById('payment-form');
  var hiddenInput = document.createElement('input');
  hiddenInput.setAttribute('type', 'hidden');
  hiddenInput.setAttribute('name', 'stripeToken');
  hiddenInput.setAttribute('value', token.id);
  form.appendChild(hiddenInput);

  // Submit します
  form.submit();
}


var paymentRequest = stripe.paymentRequest({
  country: 'JP',
  currency: 'jpy',
  total: {
    label: '合計（デモ）',
    amount: 1000,
  },
  requestPayerName: true,
  requestPayerEmail: true,
});

var elements = stripe.elements();
var prButton = elements.create('paymentRequestButton', {
  paymentRequest: paymentRequest,
});

// Payment Request APIが使えるかをチェックする.
paymentRequest.canMakePayment().then(function(result) {
  if (result) {
    prButton.mount('#payment-request-button');
  } else {
    document.getElementById('payment-request-button').style.display = 'none';
  }
});

paymentRequest.on('token', function(ev) {
  // ここでトークンをサーバへ送ります。決済の処理はサーバサイド
  fetch('/charges', {
    method: 'POST',
    body: JSON.stringify({token: ev.token.id}),
    headers: {'content-type': 'application/json'},
  })
  .then(function(response) {
    if (response.ok) {
      // ブラウザ側へ決済が成功したかを伝え、ブラウザ閉じる
      ev.complete('success');
    } else {
      // 決済が失敗した場合は、再度決済画面を表示するかエラーを表示する
      ev.complete('fail');
    }
  });
});

var paymentRequest = stripe.paymentRequest({
  country: 'JP',
  currency: 'jpy',
  total: {
    label: 'デモ（合計）',
    amount: 1000,
  },

  requestShipping: true,
  // `shippingOptions` はオプショナルです:
  shippingOptions: [
    // このリスト内のオプションがインターフェイスに表示されます
    {
      id: 'free-shipping',
      label: '配送料無料',
      detail: '通常5営業日以内にお届けいたします。',
      amount: 0,
    },
  ],
});

paymentRequest.on('shippingaddresschange', function(ev) {
  if (ev.shippingAddress.country !== 'US') {
    ev.updateWith({status: 'invalid_shipping_address'});
  } else {
    // 配送オプションを取得するためサーバサイドにリクエストします
    fetch('/calculateShipping', {
      data: JSON.stringify({
        shippingAddress: ev.shippingAddress
      })
    }).then(function(response) {
      return response.json();
    }).then(function(result) {
      ev.updateWith({
        status: 'success',
        shippingOptions: result.supportedShippingOptions,
      });
    });
  }
});
</script>